<?php

namespace App;

use App\Mail\AccountActivation;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Mail;
use PHPMailer;

class User extends Authenticatable
{
    use Notifiable;

    protected $table = 'authentication_user';
    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'id',
        'email',
        'password',
        'is_superuser',
        'is_staff',
        'is_active',
        'username',
        'first_name',
        'last_name',
        'space',
        'date_joined',
        'last_login',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
    ];

    public function __construct(array $attributes = [])
    {
        if (isset($attributes['password'])) {
            $this->generatePassword($attributes['password']);
        }
        parent::__construct($attributes);
    }

    public static function generateId()
    {
        $users = User::all();
        $idInvalid = true;
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $characterLength = strlen($characters);
        $idLength = 12;
        while ($idInvalid) {
            $id = '';
            for ($i = 0; $i < $idLength; $i++) {
                $id .= $characters[rand(0, $characterLength - 1)];
            }
            if (!$users->where('id', $id)->first()) {
                $idInvalid = false;
            }
        }
        return $id;
    }

    public function sendActivationMail($id)
    {
        echo '<pre>' . print_r(Mail::to($this)->send(new AccountActivation($id)), true) . '</pre>';
    }

    public function __set($key, $value)
    {
        if ($key == 'password') {
            $this->generatePassword($value);
        }
        parent::__set($key, $value); // TODO: Change the autogenerated stub
    }

    private function generatePassword(&$password)
    {
        $algorithm = 'pbkdf2_sha256';
        $iterations = 30000;
        $salt = mcrypt_create_iv(6, MCRYPT_DEV_URANDOM);
        $salt = base64_encode($salt);
        $hash = base64_encode(hash_pbkdf2("SHA256", $password, $salt, $iterations, 0, true));
        $password = join('$', [$algorithm, $iterations, $salt, $hash]);
    }
}
